#!/bin/env python

"""
This is a Python script that assembles the file that simulates the OpenModelica classes.
"""

import os
import re
import subprocess


def main() -> None:

    # Determine the filenames for the classes and the tests
    classes_filenames = ["classes/" + name for name in os.listdir("classes")]
    tests_filenames = ["test/" + name for name in os.listdir("test")]

    filenames = classes_filenames + tests_filenames

    # Read the content and put them in a single file.
    content = ""
    for filename in filenames:
        with open(filename, encoding="utf-8") as f:
            content += f.read()

    identifiers = re.findall(r"test_\w+", content)
    identifiers = sorted(list(set(identifiers)))

    with open("tmp_simulate.mos", mode="w+", encoding="utf-8") as f:
        for filename in filenames:
            f.write(f'loadFile("{filename}"); getErrorString();\n')
        f.write('cd("/tmp");\n')
        for i in identifiers:
            f.write(f"simulate({i}); getErrorString();\n")
            f.write(
                f"print(\"{"-"*68}\");\n"
            )

    result = subprocess.run(
        ["omc", "--std=3.2", "./tmp_simulate.mos"], stdout=subprocess.PIPE, check=True
    ).stdout.decode()

    # prettify the output
    class bcolors:
        HEADER = "\033[95m"
        OKBLUE = "\033[94m"
        OKGREEN = "\033[92m"
        WARNING = "\033[93m"
        FAIL = "\033[91m"
        ENDC = "\033[0m"
        BOLD = "\033[1m"
        UNDERLINE = "\033[4m"

    result = "\n".join(
        line
        for line in result.split("\n")
        if not line.startswith("    time")
        and "record SimulationResult" not in line
        and "end SimulationResult" not in line
        and line != '""'
        and line != "true"
    )

    result = result.replace(
        "The simulation finished successfully.",
        bcolors.OKGREEN + "The simulation finished successfully!" + bcolors.ENDC,
    )
    result = result.replace("assert", bcolors.FAIL + "assert" + bcolors.ENDC)
    for i in identifiers:
        result = result.replace(i, bcolors.BOLD + i + bcolors.ENDC)

    print(result)


if __name__ == "__main__":
    main()
